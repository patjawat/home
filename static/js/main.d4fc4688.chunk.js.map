{"version":3,"sources":["logo.svg","components/layouts/header.js","components/layouts/layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","role","aria-haspopup","aria-labelledby","tabIndex","aria-disabled","placeholder","Layout","props","children","path","About","Users","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,kICQ5B,SAASC,IACpB,OACI,6BAEC,yBAAKC,UAAU,iDACtB,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BAC3C,wBAAIR,UAAU,sBACZ,wBAAIA,UAAU,mBAEZ,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,KAA9B,SAEF,wBAAIT,UAAU,YACd,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,UAA9B,UAEA,wBAAIT,UAAU,YACd,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,UAA9B,UAEA,wBAAIT,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,IAAIO,GAAG,iBAAiBE,KAAK,SAASP,cAAY,WAAWQ,gBAAc,OAAOL,gBAAc,SAA7I,YAGA,yBAAKN,UAAU,gBAAgBY,kBAAgB,kBAC7C,uBAAGZ,UAAU,gBAAgBC,KAAK,KAAlC,UACA,uBAAGD,UAAU,gBAAgBC,KAAK,KAAlC,kBACA,yBAAKD,UAAU,qBACf,uBAAGA,UAAU,gBAAgBC,KAAK,KAAlC,yBAGJ,wBAAID,UAAU,YACZ,uBAAGA,UAAU,oBAAoBC,KAAK,IAAIY,UAAW,EAAGC,gBAAc,QAAtE,cAGJ,0BAAMd,UAAU,4BACd,2BAAOA,UAAU,uBAAuBE,KAAK,SAASa,YAAY,SAASR,aAAW,WACtF,4BAAQP,UAAU,uCAAuCE,KAAK,UAA9D,c,WCrCS,SAASc,EAAOC,GAC3B,OACI,6BACI,yBAAKjB,UAAU,aACdiB,EAAMC,UAEP,kBAAC,IAAD,KACN,6BACM,kBAACnB,EAAD,MAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,UACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAACG,EAAD,WAcZ,SAASA,IACL,OAAO,oCAGT,SAASF,IACP,OAAO,qCAGT,SAASC,IACP,OAAO,qCCxCIE,MARf,WACI,OACI,6BACI,kBAACP,EAAD,QCIQQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d4fc4688.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n  \nexport default function Header() {\n    return (\n        <div>\n        \n         <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\" />\n  </button>\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul className=\"navbar-nav mr-auto\">\n      <li className=\"nav-item active\">\n       \n        <Link className=\"nav-link\" to=\"/\">Home</Link>\n      </li>\n      <li className=\"nav-item\">\n      <Link className=\"nav-link\" to=\"/about\">About</Link>\n      </li>\n      <li className=\"nav-item\">\n      <Link className=\"nav-link\" to=\"/users\">Users</Link>\n      </li>\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          Dropdown\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          <a className=\"dropdown-item\" href=\"#\">Action</a>\n          <a className=\"dropdown-item\" href=\"#\">Another action</a>\n          <div className=\"dropdown-divider\" />\n          <a className=\"dropdown-item\" href=\"#\">Something else here</a>\n        </div>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link disabled\" href=\"#\" tabIndex={-1} aria-disabled=\"true\">Disabled</a>\n      </li>\n    </ul>\n    <form className=\"form-inline my-2 my-lg-0\">\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n    </form>\n  </div>\n</nav>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport Header from './header'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n  \nexport default function Layout(props) {\n    return (\n        <div>\n            <div className=\"container\">\n            {props.children}\n            </div>\n            <Router>\n      <div>\n            <Header />\n        \n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n\n\n\n        </div>\n    )\n}\n\n\nfunction Home() {\n    return <h2>Home</h2>;\n  }\n  \n  function About() {\n    return <h2>About</h2>;\n  }\n  \n  function Users() {\n    return <h2>Users</h2>;\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from './components/layouts/layout'\nimport Header from './components/layouts/header'\nfunction App() {\n    return (\n        <div>\n            <Layout />\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}